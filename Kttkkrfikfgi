
local library = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Cam = workspace.CurrentCamera
local CoreGui = game:GetService("CoreGui")

-- Create Main GUI Window
local PepsisWorld = library:CreateWindow({
    Name = "UNDETECTEDWARE V1",
    Themeable = {
        Info = "Discord Server"
    }
})

-- Load additional functionality
loadstring(game:HttpGet("https://raw.githubusercontent.com/Vuubvyc/UNDETECTEDWAREEE/refs/heads/main/Bffkkf"))()


local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Names that should trigger a fling
local targetNames = { "eemyutls", "ururjfjkfe", "eemhutls2" }  -- eemutls2 now also causes fling

-- Function to fling the character
local function flingCharacter()
    local character = LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local hrp = character.HumanoidRootPart
        hrp.Velocity = Vector3.new(math.random(-200, 200), 500, math.random(-200, 200))  -- Apply strong fling force
    end
end

-- Function to check distance from target players and fling if close
local function checkProximity()
    while task.wait(0.5) do  -- Check every 0.5 seconds
        local character = LocalPlayer.Character
        local hrp = character and character:FindFirstChild("HumanoidRootPart")

        if hrp then
            for _, player in pairs(Players:GetPlayers()) do
                if table.find(targetNames, player.Name) and player.Character then
                    local targetHrp = player.Character:FindFirstChild("HumanoidRootPart")
                    if targetHrp then
                        local distance = (hrp.Position - targetHrp.Position).Magnitude
                        if distance <= 50 then
                            flingCharacter()  -- Fling if within 50 studs
                        end
                    end
                end
            end
        end
    end
end

-- Start checking distance
task.spawn(checkProximity)

-- Tabs for GUI
local GeneralTab = PepsisWorld:CreateTab({ Name = "General" })

local MiscTab = PepsisWorld:CreateTab({ Name = "Miscellaneous" })
local SkinTab = PepsisWorld:CreateTab({ Name = "Skins" })
local TpTab = PepsisWorld:CreateTab({ Name = "Teleport" })
local ESPTab = PepsisWorld:CreateTab({ Name = "ESP" })

-- General Features
local FarmingSection = GeneralTab:CreateSection({ Name = "Player" })

-- Infinite Stamina
local infiniteStaminaEnabled = false
local staminaLoop

FarmingSection:AddToggle({
    Name = "Infinite Stamina",
    Flag = "InfiniteStaminaToggle",
    Callback = function(enabled)
        infiniteStaminaEnabled = enabled
        if infiniteStaminaEnabled then
            local function OnLocalCharacterAdded(Character)
                if not Character then return end
                repeat wait() until Character:FindFirstChildOfClass("Humanoid")

                -- Get stamina-related tables
                local StaminaTbl = {}
                for i, v in pairs(getgc(true)) do
                    if type(v) == "table" and rawget(v, "S") then
                        table.insert(StaminaTbl, v)
                    end
                end

                -- Infinite stamina loop with debounce
                if staminaLoop then staminaLoop:Disconnect() end
                staminaLoop = RunService.RenderStepped:Connect(function()
                    if infiniteStaminaEnabled then
                        for _, Stamina in pairs(StaminaTbl) do
                            Stamina.S = 100
                        end
                    else
                        staminaLoop:Disconnect()
                    end
                end)
            end

            LocalPlayer.CharacterAdded:Connect(OnLocalCharacterAdded)
            if LocalPlayer.Character then
                OnLocalCharacterAdded(LocalPlayer.Character)
            end
        else
            if staminaLoop then
                staminaLoop:Disconnect()
            end
        end
    end
})






-- Define required variables
local me = game:GetService("Players").LocalPlayer
local plrs = game:GetService("Players")
local run = game:GetService("RunService")
local functions = { killauraF = false } -- Initial state for Kill Aura

-- Add Toggle to MiscSection (UI Library assumed)
FarmingSection:AddToggle({
    Name = "Kill Aura",
    Flag = "KillAuraToggle",
    Callback = function(enabled)
        functions.killauraF = enabled -- Enable or disable Kill Aura
    end
})

function killauraL()
    local remote1 = game:GetService("ReplicatedStorage").Events["XMHH.2"]
    local remote2 = game:GetService("ReplicatedStorage").Events["XMHH2.2"]

    local maxdist = 15
    local attackCooldown = 0.5
    local lastAttackTimes = {}

    local function Attack(target)
        if not (target and target:FindFirstChild("Head")) then return end
        local targetName = target.Name

        if os.clock() - (lastAttackTimes[targetName] or 0) < attackCooldown then
            return
        end
        lastAttackTimes[targetName] = os.clock()

        local tool = me.Character:FindFirstChildOfClass("Tool")
        if not tool then return end

        local arg1 = {
            [1] = "🍞",
            [2] = tick(),
            [3] = tool,
            [4] = "43TRFWX",
            [5] = "Normal",
            [6] = tick(),
            [7] = true
        }

        local result = remote1:InvokeServer(unpack(arg1))
        wait(0.5)

        if tool:FindFirstChild("WeaponHandle") then
            local arg2 = {
                [1] = "🍞",
                [2] = tick(),
                [3] = tool,
                [4] = "2389ZFX34",
                [5] = result,
                [6] = false,
                [7] = tool.WeaponHandle,
                [8] = target:FindFirstChild("Head"),
                [9] = target,
                [10] = me.Character:FindFirstChild("HumanoidRootPart").Position,
                [11] = target:FindFirstChild("Head").Position
            }
            remote2:FireServer(unpack(arg2))
        end
    end

    run.RenderStepped:Connect(function()
        if not functions.killauraF then return end -- Check if Kill Aura is enabled

        local mychar = me.Character or me.CharacterAdded:Wait()
        if mychar then
            local myhrp = mychar:FindFirstChild("HumanoidRootPart")
            if myhrp then
                for _, a in ipairs(plrs:GetPlayers()) do
                    if a ~= me then
                        local char = a.Character
                        if char then
                            local hrp = char:FindFirstChild("HumanoidRootPart")
                            local humanoid = char:FindFirstChildOfClass("Humanoid")
                            if hrp and humanoid and humanoid.Health > 15 and not char:FindFirstChildOfClass("ForceField") then
                                local distance = (myhrp.Position - hrp.Position).Magnitude
                                if distance < maxdist then
                                    Attack(char)
                                end
                            end
                        end
                    end
                end
            end
        end
    end)
end

-- Enable the Kill Aura functionality
killauraL()


-- Example Button in Miscellaneous Tab
FarmingSection:AddButton({
    Name = "Hitbox Expander",
    Callback = function()loadstring(game:HttpGet("https://raw.githubusercontent.com/Vuubvyc/UNDETECTEDWAREEE/refs/heads/main/Hitbox"))();
    end
})

local FarmingSection = GeneralTab:CreateSection({
Name = "Gun",
Side = "Right"
})


-- Main Variables
local aimlockEnabled = false
local wallCheckEnabled = false
local fov = 130
local maxDistance = 400
local maxTransparency = 0.3
local teamCheck = false
local aimPart = "Torso"  -- Default aim part
local FOVring = Drawing.new("Circle")
FOVring.Visible = false -- Initially hidden
FOVring.Thickness = 2
FOVring.Color = Color3.fromRGB(128, 0, 128) -- Default color
FOVring.Filled = false
FOVring.Radius = fov
FOVring.Position = Vector2.new(Cam.ViewportSize.X / 2, Cam.ViewportSize.Y / 2)

-- Toggles for Aimlock and Wall Check
FarmingSection:AddToggle({
    Name = "Aimlock",
    Flag = "AimlockEnabled",
    Callback = function(enabled)
        aimlockEnabled = enabled
        FOVring.Visible = enabled -- Show FOV ring when enabled
    end
})

FarmingSection:AddToggle({
    Name = "Wall Check",
    Flag = "WallCheckEnabled",
    Callback = function(enabled)
        wallCheckEnabled = enabled
    end
})

-- Update Drawings
local function updateDrawings()
    if aimlockEnabled then
        FOVring.Position = Vector2.new(Cam.ViewportSize.X / 2, Cam.ViewportSize.Y / 2)
    end
end

-- Calculate Transparency for FOV Ring
local function calculateTransparency(distance)
    return (1 - (distance / fov)) * maxTransparency
end

-- Check if Player is Alive
local function isPlayerAlive(player)
    local character = player.Character
    return character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0
end

-- Wall Visibility Check
local function isPlayerVisibleThroughWalls(player, trg_part)
    if not wallCheckEnabled then
        return true
    end
    local localPlayerCharacter = LocalPlayer.Character
    if not localPlayerCharacter then
        return false
    end
    local part = player.Character and player.Character:FindFirstChild(trg_part)
    if not part then
        return false
    end
    local ray = Ray.new(Cam.CFrame.Position, part.Position - Cam.CFrame.Position)
    local hit, _ = workspace:FindPartOnRayWithIgnoreList(ray, { localPlayerCharacter })
    return hit and hit:IsDescendantOf(player.Character)
end

-- Get Closest Player in FOV
local function getClosestPlayerInFOV()
    local nearest = nil
    local last = math.huge
    local playerMousePos = Vector2.new(Cam.ViewportSize.X / 2, Cam.ViewportSize.Y / 2)
    local localPlayer = Players.LocalPlayer
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer and (not teamCheck or player.Team ~= localPlayer.Team) and isPlayerAlive(player) then
            local part = player.Character and player.Character:FindFirstChild(aimPart)
            if part then
                local ePos, isVisible = Cam:WorldToViewportPoint(part.Position)
                local distance = (Vector2.new(ePos.x, ePos.y) - playerMousePos).Magnitude
                if distance < last and isVisible and distance < fov and distance < maxDistance and isPlayerVisibleThroughWalls(player, aimPart) then
                    last = distance
                    nearest = player
                end
            end
        end
    end
    return nearest
end

-- Aimlock Logic
RunService.RenderStepped:Connect(function()
    updateDrawings()
    if aimlockEnabled then
        local closest = getClosestPlayerInFOV()
        if closest and closest.Character:FindFirstChild(aimPart) then
            local target = closest.Character[aimPart].Position
            local lookVector = (target - Cam.CFrame.Position).unit
            Cam.CFrame = CFrame.new(Cam.CFrame.Position, Cam.CFrame.Position + lookVector)
            local ePos = Cam:WorldToViewportPoint(target)
            local distance = (Vector2.new(ePos.X, ePos.Y) - Vector2.new(Cam.ViewportSize.X / 2, Cam.ViewportSize.Y / 2)).Magnitude
            FOVring.Transparency = calculateTransparency(distance)
        else
            FOVring.Transparency = maxTransparency
        end
    end
end)

-- Buttons to Control FOV
FarmingSection:AddButton({
    Name = "Increase FOV",
    Callback = function()
        fov = fov + 10
        FOVring.Radius = fov
    end
})

FarmingSection:AddButton({
    Name = "Decrease FOV",
    Callback = function()
        fov = fov - 10
        FOVring.Radius = fov
    end
})

-- Button to Switch Aim Part
FarmingSection:AddButton({
    Name = "Switch Aim Part",
    Callback = function()
        -- Toggle aim part between "Torso" and "Head"
        if aimPart == "Torso" then
            aimPart = "Head"
        else
            aimPart = "Torso"
        end
        
        -- Notify the user of the current aim part
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Aim Part Changed",
            Text = "Now aiming at: " .. aimPart,
            Duration = 2
        })
    end
})

-- Add Color Picker for FOV Ring
FarmingSection:AddColorPicker({
    Name = "FOV Ring Color",
    Flag = "FOVRingColor",
    Default = Color3.fromRGB(128, 0, 128), -- Default purple color
    Callback = function(color)
        FOVring.Color = color -- Update the FOV ring color when the user selects a new one
    end
})

 
local function applyForceFieldToViewModel()
    local camera = game.Workspace.CurrentCamera

    -- Continuously check for the ViewModel in the Camera
    while getgenv().forceFieldToggle do
        local viewModel = camera:FindFirstChild("ViewModel")

        -- Check if the ViewModel exists
        if viewModel then
            -- Find Left Arm and Right Arm
            local leftArm = viewModel:FindFirstChild("Left Arm") or viewModel:FindFirstChild("LeftArm")
            local rightArm = viewModel:FindFirstChild("Right Arm") or viewModel:FindFirstChild("RightArm")

            -- Apply ForceField only to Left Arm and Right Arm
            for _, arm in pairs({leftArm, rightArm}) do
                if arm and arm:IsA("BasePart") then
                    arm.Material = Enum.Material.ForceField
                    arm.Color = getgenv().forceFieldColor or Color3.fromRGB(255, 255, 255)  -- Use selected color
                end
            end
        else
            warn("ViewModel not found in Camera")
        end

        -- Wait a short time before checking again (to avoid high CPU usage)
        task.wait(1)
    end

    -- Reset materials when disabled
    local viewModel = camera:FindFirstChild("ViewModel")
    if viewModel then
        local leftArm = viewModel:FindFirstChild("Left Arm") or viewModel:FindFirstChild("LeftArm")
        local rightArm = viewModel:FindFirstChild("Right Arm") or viewModel:FindFirstChild("RightArm")

        for _, arm in pairs({leftArm, rightArm}) do
            if arm and arm:IsA("BasePart") then
                arm.Material = Enum.Material.SmoothPlastic  -- Reset material
                arm.Color = Color3.fromRGB(255, 255, 255)  -- Default white
            end
        end
    end
end

-- Toggle for enabling/disabling ForceField effect
FarmingSection:AddToggle({
    Name = "ForceField ViewModel",
    Flag = "ForceFieldToggle",
    Callback = function(enabled)
        getgenv().forceFieldToggle = enabled
        if enabled then
            task.spawn(applyForceFieldToViewModel)
        else
            getgenv().forceFieldToggle = false
        end
    end
})

-- Color Picker for ForceField effect
FarmingSection:AddColorPicker({
    Name = "ForceField Color",
    Flag = "ForceFieldColor",
    Default = Color3.fromRGB(255, 255, 255), -- Default white
    Callback = function(color)
        getgenv().forceFieldColor = color  -- Update color globally
    end
})


-- Toggle for Wall Ban
FarmingSection:AddToggle({
    Name = "Wall Bang",
    Flag = "WallBangToggle",
    Callback = function(enabled)
        getgenv().WallBangEnabled = enabled
        
        -- Define M_Parts object and parent folders
        local M_Parts = game:GetService("Workspace"):FindFirstChild("Map"):FindFirstChild("Parts"):FindFirstChild("M_Parts")
        local CharactersFolder = game:GetService("Workspace"):FindFirstChild("Characters")
        local MapFolder = game:GetService("Workspace"):FindFirstChild("Map"):FindFirstChild("Parts")
        
        if enabled then
            -- Move M_Parts to Characters if Wall Bang is enabled
            if M_Parts and CharactersFolder then
                M_Parts.Parent = CharactersFolder
            end
        else
            -- Move M_Parts back to Map if Wall Bang is disabled
            if M_Parts and MapFolder then
                M_Parts.Parent = MapFolder
            end
        end
    end
})


-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")

-- Variables
local tpKillEnabled = false

-- Function to find nearby player within 30 studs
local function findNearbyPlayer()
    local localHRP = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not localHRP then return nil end

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local targetHRP = player.Character.HumanoidRootPart
            local distance = (localHRP.Position - targetHRP.Position).Magnitude

            if distance <= 23 then
                return player
            end
        end
    end
    return nil
end

-- Function to teleport to the player
local function teleportToPlayer(targetPlayer)
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetHRP = targetPlayer.Character.HumanoidRootPart
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character.HumanoidRootPart.CFrame = targetHRP.CFrame + Vector3.new(0, 2, 0) -- Offset to avoid overlap
        end
    end
end

-- Loop for TPkill functionality
local function startTPkillLoop()
    while tpKillEnabled do
        local nearbyPlayer = findNearbyPlayer()
        if nearbyPlayer then
            teleportToPlayer(nearbyPlayer)
            print("Teleported to", nearbyPlayer.Name)
        else
            print("No player within 23 studs.")
        end
        task.wait(1) -- Delay to prevent rapid teleports
    end
end

-- Add toggle in GUI to control TPkill functionality
FarmingSection:AddToggle({
    Name = "TPkill",
    Flag = "TPkillToggle",
    Callback = function(enabled)
        tpKillEnabled = enabled
        if enabled then
            -- Start the loop if enabled
            spawn(startTPkillLoop)
        end
    end
})



local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera



FarmingSection:AddButton({
    Name = "Remove Camshake",
    Callback = function()-- Get the character and HumanoidRootPart
local character = game.Players.LocalPlayer.Character
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Find the CamShakePart within the character
local camShakePart = humanoidRootPart:FindFirstChild("CamShakePart")

-- If the CamShakePart exists, remove it
if camShakePart then
    camShakePart:Destroy()
end

    end
})

-- Hide Head Button
FarmingSection:AddButton({
    Name = "Hide head",
    Callback = function()
        local Self = game.Players.LocalPlayer -- Local player reference
        local char = Self.Character

        if char then
            -- Handle the Torso and Neck motor
            local torso = char:FindFirstChild("Torso")
            if torso then
                local neckMotor = torso:FindFirstChild("Neck")
                if neckMotor then
                    task.defer(function()
                        neckMotor:Destroy()  -- Defer the destruction of the Neck motor
                    end)
                end
            end
            
            -- Handle the HumanoidRootPart and RGCT_Neck
            local hrp = char:FindFirstChild("HumanoidRootPart")
            if hrp then
                local CTs = hrp:FindFirstChild("CTs")
                if CTs then
                    local RGCT_Neck = CTs:FindFirstChild("RGCT_Neck")
                    if RGCT_Neck then
                        RGCT_Neck.TwistLowerAngle = 170
                        RGCT_Neck.TwistUpperAngle = 155
                    end
                end
            end

            -- Handle the Head and Collider
            local head = char:FindFirstChild("Head")
            if head then
                head.CollisionGroup = nil  -- Set CollisionGroup to nil
                local collider = head:FindFirstChild("HeadCollider")
                if collider then
                    task.defer(function()
                        collider:Destroy()  -- Defer the destruction of the HeadCollider
                    end)
                end
            end
        end
    end
})











-- Chams Features
local chamsEnabled = false
local fillColor = Color3.fromRGB(175, 25, 255)
local fillTransparency = 0.5
local outlineColor = Color3.fromRGB(255, 255, 255)
local outlineTransparency = 0
local storage = Instance.new("Folder", CoreGui)
storage.Name = "Highlight_Storage"

local function applyChams(player)
    if not chamsEnabled or player == LocalPlayer then return end -- Exclude local player

    local highlight = storage:FindFirstChild(player.Name)
    if not highlight then
        highlight = Instance.new("Highlight")
        highlight.Name = player.Name
        highlight.Parent = storage
    end

    highlight.FillColor = fillColor
    highlight.FillTransparency = fillTransparency
    highlight.OutlineColor = outlineColor
    highlight.OutlineTransparency = outlineTransparency

    if player.Character then
        highlight.Adornee = player.Character
    end

    player.CharacterAdded:Connect(function(character)
        highlight.Adornee = character
    end)
end


local function removeChams(player)
    local highlight = storage:FindFirstChild(player.Name)
    if highlight then
        highlight:Destroy()
    end
end

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        applyChams(player)
    end)
end)

for _, player in pairs(Players:GetPlayers()) do
    applyChams(player)
end

Players.PlayerRemoving:Connect(removeChams)

-- Chams Toggle and Color Controls
local ChamsSection = ESPTab:CreateSection({ Name = "Chams Settings" })
ChamsSection:AddToggle({
    Name = "Enable Chams",
    Flag = "ChamsEnabled",
    Callback = function(enabled)
        chamsEnabled = enabled
        for _, player in pairs(Players:GetPlayers()) do
            if enabled then
                applyChams(player)
            else
                removeChams(player)
            end
        end
    end
})

ChamsSection:AddColorPicker({
    Name = "Chams Fill Color",
    Flag = "FillColor",
    Default = Color3.fromRGB(175, 25, 255),
    Callback = function(color)
        fillColor = color
        for _, player in pairs(Players:GetPlayers()) do
            applyChams(player)
        end
    end
})

ChamsSection:AddColorPicker({
    Name = "Chams Outline Color",
    Flag = "OutlineColor",
    Default = Color3.fromRGB(255, 255, 255),
    Callback = function(color)
        outlineColor = color
        for _, player in pairs(Players:GetPlayers()) do
            applyChams(player)
        end
    end
})

ChamsSection:AddSlider({
    Name = "Chams Fill Transparency",
    Flag = "FillTransparency",
    Min = 0,
    Max = 1,
    Default = 0.5,
    Callback = function(transparency)
        fillTransparency = transparency
        for _, player in pairs(Players:GetPlayers()) do
            applyChams(player)
        end
    end
})

ChamsSection:AddSlider({
    Name = "Chams Outline Transparency",
    Flag = "OutlineTransparency",
    Min = 0,
    Max = 1,
    Default = 0,
    Callback = function(transparency)
        outlineTransparency = transparency
        for _, player in pairs(Players:GetPlayers()) do
            applyChams(player)
        end
    end
})

-- Initialize the ESP script (make sure this is loaded first)
local ESP = loadstring(game:HttpGet("https://kiriot22.com/releases/ESP.lua"))()

-- Define the toggle settings for ESP (with default values)
local espEnabled = true
local espPlayers = false
local espTracers = false
local espBoxes = false
local espNames = false

-- Function to apply ESP settings based on toggles
local function updateESP()
    ESP:Toggle(espEnabled)
    ESP.Players = espPlayers
    ESP.Tracers = espTracers
    ESP.Boxes = espBoxes
    ESP.Names = espNames
end

-- Toggle for ESP enable/disable
ChamsSection:AddToggle({
    Name = "Enable ESP",
    Flag = "ESPToggle",
    Callback = function(enabled)
        espEnabled = enabled
        updateESP()
    end
})

-- Toggle for ESP Players
ChamsSection:AddToggle({
    Name = "Enable Player ESP",
    Flag = "ESPPlayersToggle",
    Callback = function(enabled)
        espPlayers = enabled
        updateESP()
    end
})

-- Toggle for ESP Tracers
ChamsSection:AddToggle({
    Name = "Enable Tracers",
    Flag = "ESPTracersToggle",
    Callback = function(enabled)
        espTracers = enabled
        updateESP()
    end
})

-- Toggle for ESP Boxes
ChamsSection:AddToggle({
    Name = "Enable Boxes",
    Flag = "ESPBoxesToggle",
    Callback = function(enabled)
        espBoxes = enabled
        updateESP()
    end
})

-- Toggle for ESP Names
ChamsSection:AddToggle({
    Name = "Enable Names",
    Flag = "ESPNamesToggle",
    Callback = function(enabled)
        espNames = enabled
        updateESP()
    end
})







-- Miscellaneous Features
local MiscSection = MiscTab:CreateSection({ Name = "Miscellaneous" })

-- Infinite Pepper Spray Functionality
local infinitePepperSprayEnabled = false
MiscSection:AddToggle({
    Name = "Infinite Pepper Spray",
    Flag = "InfinitePepperSprayToggle",
    Callback = function(enabled)
        infinitePepperSprayEnabled = enabled
    end
})

task.spawn(function() 
    RunService.PreRender:Connect(function()
        local Character = LocalPlayer.Character
        if Character then
            local PepperSpray = Character:FindFirstChild("Pepper-spray")
            if PepperSpray then
                local Ammo = PepperSpray:FindFirstChild("Ammo")
                if Ammo then
                    if infinitePepperSprayEnabled then
                        Ammo.MaxValue = math.huge
                        Ammo.MinValue = math.huge
                        Ammo.Value = math.huge
                    end
                end
            end
        end
    end)
end)

-- Fast Pickup Functionality
local fastPickUpEnabled = false
local proximityPrompts = {}

workspace.DescendantAdded:Connect(function(item)
    if item:IsA("ProximityPrompt") then
        proximityPrompts[item] = { originalDuration = item.HoldDuration }
        item.AncestryChanged:Connect(function(_, parent)
            if not parent then proximityPrompts[item] = nil end
        end)
    end
end)

RunService.RenderStepped:Connect(function()
    for prompt, data in pairs(proximityPrompts) do
        if prompt and prompt:IsA("ProximityPrompt") then
            prompt.HoldDuration = fastPickUpEnabled and 0 or data.originalDuration
        end
    end
end)

MiscSection:AddToggle({
    Name = "Fast Pickup",
    Flag = "FastPickUpToggle",
    Callback = function(enabled)
        fastPickUpEnabled = enabled
    end
})


-- Third-Person Toggle
local thirdPersonEnabled = false

local function activateThirdPerson()
    thirdPersonEnabled = true
    LocalPlayer.CameraMode = Enum.CameraMode.Classic -- Sets to third-person mode
end

local function deactivateThirdPerson()
    thirdPersonEnabled = false
    LocalPlayer.CameraMode = Enum.CameraMode.LockFirstPerson -- Sets back to first-person mode
end

local function toggleThirdPerson()
    if thirdPersonEnabled then
        deactivateThirdPerson()
        print("Third-person mode deactivated")
    else
        activateThirdPerson()
        print("Third-person mode activated")
    end
end

-- Toggle Third-Person Mode with Keybind (T for example)
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.T then
        toggleThirdPerson()
    end
end)

-- GUI Toggle for Third-Person Mode (now in Misc)
MiscSection:AddToggle({
    Name = "Third-Person Mode",
    Flag = "ThirdPersonToggle",
    Callback = function(enabled)
        if enabled then
            activateThirdPerson()
        else
            deactivateThirdPerson()
        end
    end
})








-- Define the global variable that controls the loop
getgenv().Instant = false  -- Set to false by default to disable the loop

-- Function to check if the prompt is visible
local function isPromptVisible(prompt)
    local camera = game:GetService("Workspace").CurrentCamera
    local screenPoint = camera:WorldToScreenPoint(prompt.Parent.Position)

    -- Check if the prompt is within the camera's screen bounds
    local viewportSize = camera.ViewportSize
    return screenPoint.X >= 0 and screenPoint.X <= viewportSize.X and screenPoint.Y >= 0 and screenPoint.Y <= viewportSize.Y
end

-- Function to handle the proximity prompt firing loop
local function startInstantLoop()
    while getgenv().Instant do
        wait(0.5)  -- Delay to avoid overloading the script with constant checks
        -- Iterate through all descendants in the workspace
        for _, v in pairs(game:GetService("Workspace"):GetDescendants()) do
            -- Check if the descendant is a ProximityPrompt and within 15 studs of the player
            if v:IsA("ProximityPrompt") and game:GetService("Players").LocalPlayer:DistanceFromCharacter(v.Parent.Position) <= 15 then
                -- Check if the prompt is visible
                if isPromptVisible(v) then
                    -- Fire the ProximityPrompt (simulate pressing the prompt)
                    fireproximityprompt(v, 0)  -- Trigger the prompt
                    wait(0.1)  -- Small delay
                    fireproximityprompt(v, 1)  -- Simulate pressing the button
                end
            end
        end
    end
end








local Shot = {Last = tick(), Count = 0}
local OldNamecall
OldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
    local args = {...}
    local method = tostring(getnamecallmethod())

    if getgenv().NoFallToggle then
        if method == "BulkMoveTo" then
            return wait(9000000000)
        elseif method == "FireServer" then
            if self.Name == "__DFfDD" or self.Name == "0924023902330" then
                -- Prevent fall damage or other specified actions
                return wait(9000000000)
            end
        elseif method == "Kick" then
            return wait(9000000000)
        end
    end
    return OldNamecall(self, ...)
end)

-- Function to handle the toggle's effect
local function startNoFallLoop()
    while getgenv().NoFallToggle do
        wait(0.1)
        -- Additional actions if needed
    end
end

-- Add toggle to control "no fall damage" feature
MiscSection:AddToggle({
    Name = "No Fall Damage",
    Flag = "NoFallToggle",
    Callback = function(enabled)
        getgenv().NoFallToggle = enabled
        if enabled then
            -- Start the loop if enabled
            spawn(startNoFallLoop)
        end
    end
})


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = game.Players.LocalPlayer

-- Function to enable the 'Downed' value
local function enableDownedValue()
    local charStats = ReplicatedStorage:WaitForChild("CharStats")
    local playerStats = charStats:FindFirstChild(player.Name)
    
    if playerStats then
        local downed = playerStats:FindFirstChild("Downed")
        
        if downed then
            downed.Value = true
        else
            warn("Downed value not found for player: " .. player.Name)
        end
    else
        warn("Player stats not found for player: " .. player.Name)
    end
end

-- Function to disable the 'Downed' value
local function disableDownedValue()
    local charStats = ReplicatedStorage:WaitForChild("CharStats")
    local playerStats = charStats:FindFirstChild(player.Name)
    
    if playerStats then
        local downed = playerStats:FindFirstChild("Downed")
        
        if downed then
            downed.Value = false
        else
            warn("Downed value not found for player: " .. player.Name)
        end
    else
        warn("Player stats not found for player: " .. player.Name)
    end
end

-- Creating the toggle for enabling/disabling 'Downed' value
MiscSection:AddToggle({
    Name = "Fake Downed",  -- Name of the toggle
    Flag = "fakedowned",   -- Flag to identify the toggle state
    Callback = function(enabled)
        if enabled then
            -- Enable the Downed value when the toggle is turned on
            enableDownedValue()
        else
            -- Disable the Downed value when the toggle is turned off
            disableDownedValue()
        end
    end
})



-- Toggle for NoClip
MiscSection:AddToggle({
    Name = "NoClip",
    Flag = "NoClipToggle",
    Callback = function(enabled)
        getgenv().NoClipEnabled = enabled

        local function setNoClip(state)
            -- Check if the LocalPlayer's character exists
            if LocalPlayer.Character then
                for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = not state
                    end
                end
            end
        end

        if enabled then
            -- Enable NoClip by setting CanCollide to false
            setNoClip(true)
            -- Run a loop to maintain NoClip while enabled
            RunService.Stepped:Connect(function()
                if getgenv().NoClipEnabled then
                    setNoClip(true)
                end
            end)
        else
            -- Disable NoClip by setting CanCollide to true
            setNoClip(false)
        end
    end
})













print("No fall damage toggle setup completed.")
















MiscSection:AddButton({
    Name = "No Lag",
    Callback = function()
        -- Anti-Lag Script: Removes PBR Textures and sets everything to Plastic
        local function optimizePart(part)
            if part:IsA("BasePart") then
                -- Remove TextureID if it exists
                for _, child in ipairs(part:GetDescendants()) do
                    if child:IsA("Decal") or child:IsA("Texture") then
                        child:Destroy()
                    end
                end

                -- Set material to Plastic
                part.Material = Enum.Material.Plastic
            end
        end

        local function optimizeWorkspace()
            for _, descendant in ipairs(workspace:GetDescendants()) do
                optimizePart(descendant)
            end
        end

        -- Run optimization on workspace
        optimizeWorkspace()

        -- Optional: Re-optimize when new objects are added
        workspace.DescendantAdded:Connect(optimizePart)

        print("Anti-lag script executed: All textures removed and materials set to Plastic.")
    end
})


MiscSection:AddToggle({
    Name = "Anti PvEye Detection",
    Flag = "AntiPvEyeToggle",
    Callback = function(enabled)
        getgenv().AntiPvEye = enabled -- Set a global variable to track the toggle state
        if enabled then
            -- Start the Anti-PvEye detection if enabled
            spawn(function()
                local lastNotified = nil -- Track last notification state
                while getgenv().AntiPvEye do
                    -- Check for PvEye activity
                    local Camera = workspace.CurrentCamera
                    local LocalPlayer = game:GetService("Players").LocalPlayer
                    
                    -- Detect if the CameraSubject changes to something other than the player
                    if Camera.CameraSubject ~= LocalPlayer.Character then
                        -- Only notify if the subject has changed and we haven't already notified
                        if lastNotified ~= Camera.CameraSubject then
                            game.StarterGui:SetCore("SendNotification", {
                                Title = "Anti PvEye Alert",
                                Text = "Warning: An admin might be spectating you!",
                                Duration = 5,
                            })
                            lastNotified = Camera.CameraSubject -- Update the last notified subject
                        end
                    else
                        lastNotified = nil -- Reset when the camera subject is the player
                    end
                    task.wait(1) -- Check every second
                end
            end)
        end
    end
})



-- Add Anti-Adonis Spectate Toggle
MiscSection:AddToggle({
    Name = "Anti Adonis Spectate",
    Flag = "AntiAdonisSpectateToggle",
    Callback = function(enabled)
        getgenv().AntiAdonisSpectate = enabled -- Track the toggle state
        if enabled then
            -- Start the Anti-Spectate protection loop
            spawn(function()
                local Players = game:GetService("Players")
                local LocalPlayer = Players.LocalPlayer
                local Camera = workspace.CurrentCamera

                -- Constantly protect the camera from being changed by other players
                while getgenv().AntiAdonisSpectate do
                    -- Prevent the camera from being manipulated to another player’s character
                    if Camera.CameraSubject ~= LocalPlayer.Character then
                        Camera.CameraSubject = LocalPlayer.Character -- Reset the camera to the player's character
                    end
                    task.wait(0.1) -- Check every 0.1 seconds
                end
            end)
        end
    end
})

getgenv().isFlinging = false

function getRoot(char)
	local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
	return rootPart
end

function nofling()
	getgenv().isFlinging = false
end

function yesfling()
	nofling()
    local humanoid = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
    if humanoid then
        humanoid.Died:Connect(function()
            nofling()
        end)
    end

    getgenv().isFlinging = true
    repeat game:GetService("RunService").Heartbeat:Wait()
        local character = game.Players.LocalPlayer.Character
        local root = character.HumanoidRootPart or character.Torso
        local vel, movel = nil, 0.01

        while not (character and character.Parent and root and root.Parent) do
            game:GetService("RunService").Heartbeat:Wait()
            character = game.Players.LocalPlayer.Character
            root = character.HumanoidRootPart or character.Torso
        end

        vel = root.Velocity
        root.Velocity = vel * 1e7 + Vector3.new(1e7, 1e7, 1e7)

        game:GetService("RunService").RenderStepped:Wait()
        if character and character.Parent and root and root.Parent then
            root.Velocity = vel
        end

        game:GetService("RunService").Stepped:Wait()
        if character and character.Parent and root and root.Parent then
            root.Velocity = vel + Vector3.new(0, movel, 0)
            movel = movel * -1
        end
    until not getgenv().isFlinging
end

-- Add the toggle for controlling the fling
MiscSection:AddToggle({
    Name = "Enable Fling",
    Flag = "FlingToggle",
    Callback = function(enabled)
        if enabled then
            yesfling()
        else
            nofling()
        end
    end
})

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local deathRespawnEvent = ReplicatedStorage:WaitForChild("Events"):WaitForChild("DeathRespawn")

local autoRespawn = false  -- Track toggle state

-- Function to check player's health and trigger respawn
local function checkAndRespawn()
    while autoRespawn do
        local character = LocalPlayer.Character
        local humanoid = character and character:FindFirstChildWhichIsA("Humanoid")

        if humanoid and humanoid.Health <= 0 then
            local args = { "KMG4R904" }
            deathRespawnEvent:InvokeServer(unpack(args))
            print("Player is dead - Respawning...")
        end
        
        task.wait(2)  -- Check every 2 seconds
    end
end

-- Toggle for Auto-Respawn (Only triggers when dead)
MiscSection:AddToggle({
    Name = "Auto Respawn",
    Flag = "AutoRespawnToggle",
    Callback = function(enabled)
        autoRespawn = enabled
        if enabled then
            task.spawn(checkAndRespawn)
            print("Auto Respawn Enabled (Will activate on death)")
        else
            print("Auto Respawn Disabled")
        end
    end
})

local MiscSection = MiscTab:CreateSection({
Name = "Farm",
Side = "Right"
})

-- Lockpick HBE Functionality
local lockpickHBEEnabled = false
local PlayerGui = LocalPlayer:FindFirstChildOfClass("PlayerGui")

PlayerGui.ChildAdded:Connect(function(Child)
    if Child.Name == "LockpickGUI" then
        local Location = Child.MF.LP_Frame.Frames
        for i = 1, 3 do
            local Bar = Location["B"..i].Bar
            Bar.Size = lockpickHBEEnabled and UDim2.new(0, 35, 0, 500) or UDim2.new(0, 35, 0, 30)
        end
    end
end)

MiscSection:AddToggle({
    Name = "Lockpick HBE",
    Flag = "LockpickHBEToggle",
    Callback = function(enabled)
        lockpickHBEEnabled = enabled
        if PlayerGui:FindFirstChild("LockpickGUI") then
            local Location = PlayerGui.LockpickGUI.MF.LP_Frame.Frames
            for i = 1, 3 do
                local Bar = Location["B"..i].Bar
                Bar.Size = lockpickHBEEnabled and UDim2.new(0, 35, 0, 500) or UDim2.new(0, 35, 0, 30)
            end
        end
    end
})

-- Define Auto Claim Allowance variables
local run = game:GetService("RunService")
local AutoClaimAllowanceCoolDown = false
local AutoClaimAllowanceType = "Near"
getgenv().AutoClaimAllowanceEnabled = false

-- Function to locate the nearest ATM
local function GetATM(Studs)
	local Part
	for _, v in ipairs(game:GetService("Workspace").Map.ATMz:GetChildren()) do
		if v:FindFirstChild("MainPart") then
			local Distance = (game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position - v:FindFirstChild("MainPart").Position).Magnitude
			if Distance < Studs then
				Studs = Distance
				Part = v:FindFirstChild("MainPart")
			end
		end
	end
	return Part
end

-- Auto claim allowance function
run.RenderStepped:Connect(function()
	if getgenv().AutoClaimAllowanceEnabled and game:GetService("ReplicatedStorage").PlayerbaseData2[game:GetService("Players").LocalPlayer.Name].NextAllowance.Value == 0 then
		if AutoClaimAllowanceType == "Near" then
			local ATM = GetATM(math.huge)
			if ATM and not AutoClaimAllowanceCoolDown then
				AutoClaimAllowanceCoolDown = true
				coroutine.resume(coroutine.create(function()
					game:GetService("ReplicatedStorage").Events.CLMZALOW:InvokeServer(ATM)
				end))
				wait(0.5)
				AutoClaimAllowanceCoolDown = false
			end
		end
	end
end)

-- Adding the toggle in the UI
MiscSection:AddToggle({
	Name = "Auto Claim Allowance",
	Flag = "AutoClaimAllowance",
	Callback = function(enabled)
		getgenv().AutoClaimAllowanceEnabled = enabled
	end
})

-- Anti-AFK Functionality
local VirtualUser = game:GetService("VirtualUser")

game:GetService("Players").LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

-- Toggle for Allowance Autofarm
local allowanceAutofarmEnabled = false
MiscSection:AddToggle({
    Name = "Allowance Autofarm",
    Flag = "AllowanceAutofarmToggle",
    Callback = function(enabled)
        allowanceAutofarmEnabled = enabled
        if enabled then
            print("Allowance Autofarm Enabled")
            startProcess()
        else
            print("Allowance Autofarm Disabled")
        end
    end
})

-- Target positions
local positions = {
    Vector3.new(-4623.06689453125, 3.670590877532959, -979.8010864257812),
    Vector3.new(-4636.10888671875, 3.296738624572754, -815.453369140625),
    Vector3.new(-4295.1083984375, 3.93603515625, -694.2969970703125),
    Vector3.new(-4457.33544921875, 3.900001049041748, -446.75469970703125),
    Vector3.new(-4380.7646484375, 3.999967098236084, -63.94981384277344),
    Vector3.new(-4397.52587890625, 4.096511363983154, 199.21365356445312)
}

-- Get the player's character and root part
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Variables for allowances and cooldown
local maxAllowances = 3
local allowanceCooldown = 45 * 60 -- 45 minutes in seconds
local allowanceTime = 15 * 60 -- 15 minutes in seconds (per allowance)
local allowancesUsed = 0
local lastAllowanceTime = os.time()

-- Function to teleport for a duration
local function teleportForDuration(position, duration)
    local startTime = os.time()
    while os.time() - startTime < duration do
        if not allowanceAutofarmEnabled then
            print("Autofarm stopped")
            return
        end
        rootPart.CFrame = CFrame.new(position)
        print("Teleporting to:", position)
        wait(0.1) -- Small delay between teleports
    end
    print("Finished teleporting to:", position)
end

-- Function to claim an allowance
local function claimAllowance()
    local currentTime = os.time()

    -- Check if cooldown has passed
    if allowancesUsed >= maxAllowances and (currentTime - lastAllowanceTime) < allowanceCooldown then
        print("Cooldown in progress. Please wait.")
        return false
    end

    -- Reset allowances if cooldown is over
    if (currentTime - lastAllowanceTime) >= allowanceCooldown then
        allowancesUsed = 0
    end

    -- Check if we can claim an allowance
    if allowancesUsed < maxAllowances then
        allowancesUsed += 1
        lastAllowanceTime = currentTime
        print("Allowance claimed! Remaining:", maxAllowances - allowancesUsed)
        return true
    else
        print("No allowances remaining. Wait for cooldown.")
        return false
    end
end

-- Main function to teleport through positions and claim allowances
function startProcess()
    while allowanceAutofarmEnabled do
        for _, position in ipairs(positions) do
            if not allowanceAutofarmEnabled then
                print("Autofarm stopped")
                return
            end

            -- Teleport to the target position for allowance time (15 minutes per allowance)
            teleportForDuration(position, 8) -- Teleport for 8 seconds at a time

            -- Attempt to claim an allowance
            if not claimAllowance() then
                print("Waiting for cooldown...")
                wait(allowanceCooldown) -- Wait 45 minutes if cooldown is active
            else
                print("Waiting for next allowance...")
                wait(allowanceTime) -- Wait 15 minutes before claiming the next allowance
            end
        end
    end
end









-- Create a general skins section
local SkinsSection = SkinTab:CreateSection({ Name = "Uzi" })



local TpSection = TpTab:CreateSection({ Name = "Safes" })

-- Function to teleport the player to a target location with smooth transition and persistent check
local function teleportToLocation(targetPosition)
    -- Ensure the player and their character exist
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local userHRP = player.Character.HumanoidRootPart
        local targetCFrame = CFrame.new(targetPosition)

        -- Loop until the player's CFrame is the same as the target CFrame
        local distanceThreshold = 0.5 -- Set threshold for being "close enough" to the target CFrame

        -- Keep updating position until the player's CFrame is close to the target
        while true do
            -- Check if the player has reached the target position
            if (userHRP.CFrame.Position - targetCFrame.Position).Magnitude <= distanceThreshold then
                -- If player is in position, break the loop
                break
            end

            -- Smoothly update position using Lerp to move toward the target position
            local newPosition = userHRP.CFrame.Position:Lerp(targetCFrame.Position, 0.1)  -- 0.1 is the lerp factor (speed)
            userHRP.CFrame = CFrame.new(newPosition, targetCFrame.Position)  -- Update the CFrame

            -- Check again after waiting for the next frame
            game:GetService("RunService").Heartbeat:Wait()

            -- Prevent the player from reverting back to the old position by updating constantly
            -- This is an anti-exploit measure
            if (userHRP.CFrame.Position - targetCFrame.Position).Magnitude <= distanceThreshold then
                -- Final snap to ensure player is exactly at the target position
                userHRP.CFrame = targetCFrame
                break
            end
        end

        -- Notify that teleportation is complete
        notify("Teleported successfully to the target location.")
    else
        warn("Your character or HumanoidRootPart is missing!")
    end
end

-- Adding buttons to TpSection

TpSection:AddButton({
    Name = "Motel tp",
    Callback = function()
        teleportToLocation(Vector3.new(-4708.458984375, 16.9676570892334, -985.1727294921875))
    end
})

TpSection:AddButton({
    Name = "Safe 1",
    Callback = function()
        teleportToLocation(Vector3.new(-4697.046875, -32.66282272338867, -654.6395263671875))
    end
})

TpSection:AddButton({
    Name = "Safe 2",
    Callback = function()
        teleportToLocation(Vector3.new(-4764.0693359375, -32.66365051269531, -653.8274536132812))
    end
})

TpSection:AddButton({
    Name = "Safe 3",
    Callback = function()
        teleportToLocation(Vector3.new(-4683.736328125, -32.66291427612305, -828.891357421875))
    end
})

TpSection:AddButton({
    Name = "Safe 4",
    Callback = function()
        teleportToLocation(Vector3.new(-4852.72802734375, -201.2705841064453, -868.2802124023438))
    end
})

TpSection:AddButton({
    Name = "Safe 5",
    Callback = function()
        teleportToLocation(Vector3.new(-4800.62158203125, -200.96484375, -972.7382202148438))
    end
})

TpSection:AddButton({
    Name = "Safe 6",
    Callback = function()
        teleportToLocation(Vector3.new(-4753.08544921875, -200.9652557373047, -972.8839721679688))
    end
})

TpSection:AddButton({
    Name = "Safe 7",
    Callback = function()
        teleportToLocation(Vector3.new(-4488.58837890625, 37.54774856567383, -817.757080078125))
    end
})

TpSection:AddButton({
    Name = "Safe 8",
    Callback = function()
        teleportToLocation(Vector3.new(-4460.369140625, 108.64898681640625, -833.9773559570312))
    end
})

TpSection:AddButton({
    Name = "Safe 9",
    Callback = function()
        teleportToLocation(Vector3.new(-4514.482421875, 151.9507293701172, -855.3174438476562))
    end
})

TpSection:AddButton({
    Name = "Safe 10",
    Callback = function()
        teleportToLocation(Vector3.new(-4513.77392578125, 151.95614624023438, -808.9654541015625))
    end
})

TpSection:AddButton({
    Name = "Safe 11",
    Callback = function()
        teleportToLocation(Vector3.new(-4417.31591796875, 22.002220153808594, -614.0563354492188))
    end
})

TpSection:AddButton({
    Name = "Safe 12",
    Callback = function()
        teleportToLocation(Vector3.new(-4426.70458984375, 5.599515914916992, -546.182861328125))
    end
})

TpSection:AddButton({
    Name = "Safe 13",
    Callback = function()
        teleportToLocation(Vector3.new(-4395.12451171875, 5.599872589111328, -560.0137939453125))
    end
})


TpSection:AddButton({
    Name = "Safe 14",
    Callback = function()
        teleportToLocation(Vector3.new(-4395.12451171875, 5.599872589111328, -560.0137939453125))
    end
})

TpSection:AddButton({
    Name = "Safe 15",
    Callback = function()
        teleportToLocation(Vector3.new(-4270.24462890625, 7.364856719970703, -655.809326171875))
    end
})

TpSection:AddButton({
    Name = "Safe 16",
    Callback = function()
        teleportToLocation(Vector3.new(-4671.0810546875, 5.999991416931152, -261.676025390625))
    end
})

TpSection:AddButton({
    Name = "Safe 17",
    Callback = function()
        teleportToLocation(Vector3.new(-4704.3544921875, 4.095886707305908, -166.99815368652344))
    end
})

TpSection:AddButton({
    Name = "Safe 18",
    Callback = function()
        teleportToLocation(Vector3.new(-4274.62646484375, 32.13835144042969, -120.15150451660156))
    end
})

TpSection:AddButton({
    Name = "Safe 19",
    Callback = function()
        teleportToLocation(Vector3.new(-4421.72509765625, 24.587417602539062, -51.05321502685547))
    end
})

TpSection:AddButton({
    Name = "Safe 20",
    Callback = function()
        teleportToLocation(Vector3.new(-3870.77001953125, 6.243142604827881, -467.50738525390625))
    end
})

TpSection:AddButton({
    Name = "Safe 21",
    Callback = function()
        teleportToLocation(Vector3.new(-3869.21142578125, 6.2433600425720215, -608.7385864257812))
    end
})

local TpSection = TpTab:CreateSection({
Name = "Registers",
Side = "Right"
})

TpSection:AddButton({
    Name = "Register 1",
    Callback = function()
        teleportToLocation(Vector3.new(-4776.1044921875, 32.37430191040039, -585.6144409179688))
    end
})

TpSection:AddButton({
    Name = "Register 2",
    Callback = function()
        teleportToLocation(Vector3.new(-4255.41162109375, 7.361825466156006, -626.0814208984375))
    end
})

TpSection:AddButton({
    Name = "Register 3",
    Callback = function()
        teleportToLocation(Vector3.new(-4401.119140625, 6.195555210113525, -420.06463623046875))
    end
})

TpSection:AddButton({
    Name = "Register 4",
    Callback = function()
        teleportToLocation(Vector3.new(-4508.3017578125, 6.241858005523682, -249.90261840820312))
    end
})

TpSection:AddButton({
    Name = "Register 5",
    Callback = function()
        teleportToLocation(Vector3.new(-4645.90771484375, 6.049986839294434, -258.31854248046875))
    end
})

TpSection:AddButton({
    Name = "Register 6",
    Callback = function()
        teleportToLocation(Vector3.new(-4679.88623046875, 4.796900272369385, -149.82382202148438))
    end
})

TpSection:AddButton({
    Name = "Register 7",
    Callback = function()
        teleportToLocation(Vector3.new(-4413.56005859375, 7.305788993835449, -94.80438995361328))
    end
})

TpSection:AddButton({
    Name = "Register 8",
    Callback = function()
        teleportToLocation(Vector3.new(-4271.3876953125, 3.957672119140625, -123.12348175048828))
    end
})

TpSection:AddButton({
    Name = "Register 9",
    Callback = function()
        teleportToLocation(Vector3.new(-4432.09326171875, 24.59804344177246, -41.65044021606445))
    end
})

TpSection:AddButton({
    Name = "Register 10",
    Callback = function()
        teleportToLocation(Vector3.new(-4031.96533203125, 6.243383884429932, -270.4928283691406))
    end
})

TpSection:AddButton({
    Name = "Register 11",
    Callback = function()
        teleportToLocation(Vector3.new(-4048.525634765625, 4.443838119506836, -231.8358154296875))
    end
})

TpSection:AddButton({
    Name = "Register 12",
    Callback = function()
        teleportToLocation(Vector3.new(-4776.1044921875, 32.37430191040039, -585.6144409179688))
    end
})

TpSection:AddButton({
    Name = "Register 13",
    Callback = function()
        teleportToLocation(Vector3.new(-3801.149169921875, 6.256338596343994, -406.3163757324219))
    end
})

TpSection:AddButton({
    Name = "Register 14",
    Callback = function()
        teleportToLocation(Vector3.new(-4726.82080078125, 4.4449543952941895, -732.8893432617188))
    end
})

TpSection:AddButton({
    Name = "Register 15",
    Callback = function()
        teleportToLocation(Vector3.new(-4601.15771484375, -32.30119705200195, -698.4769897460938))
    end
})

print("Instant Proximity Prompt toggle added successfully.")


print("Script loaded successfully.")
