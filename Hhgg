local rcFunction, grcFunction
local numberT = 20

-- Function to find a specific function in the game context
local function findFunction(name)
    for _, v in next, getgc(true) do
        if type(v) == "table" and type(rawget(v, name)) == "function" then
            return v[name]
        end
    end
    return nil
end

-- Attempt to find rcFunction and grcFunction
rcFunction = findFunction("lol")
if not rcFunction or not getinfo(rcFunction).source:find(".RCHB") then
    warn("Failed to get a crucial function for the melee HBE unpatcher.")
end

grcFunction = findFunction("ONRH_S4")
if not grcFunction then
    warn("Failed to get a crucial function for the gun HBE unpatcher.")
end

-- Modify constants if the functions were found
local function updateConstants(func, values)
    for i, v in next, getconstants(func) do
        if values[v] then
            setconstant(func, i, numberT)
        end
    end
end

if rcFunction then
    updateConstants(rcFunction, { [1.75] = true, [10] = true })
end

if grcFunction then
    updateConstants(grcFunction, { [1.5] = true, [10] = true })
end

local DefHeadSize = game.Players.LocalPlayer.Character:WaitForChild("Head").Size
local Lighting = game.Lighting
local DefaultAmbient = Lighting.Ambient

local oldIndex
oldIndex = hookmetamethod(game, "__index", newcclosure(function(...)
    local tab, key = ...
    if not checkcaller() and tab and type(tab) == "userdata" and key == "Size" then
        if oldIndex(tab, "ClassName") == "Part" and oldIndex(tab, "Name") == "Head" then
            return DefHeadSize
        end
    end
    return oldIndex(...)
end))

local oldNewIndex
oldNewIndex = hookmetamethod(game, "__newindex", newcclosure(function(...)
    if not checkcaller() then
        local tab, key, value = ...
        if tab == Lighting and key == "Ambient" then
            return oldNewIndex(tab, key, FullBright and _G.FullBrightColor or DefaultAmbient)
        end
    end
    return oldNewIndex(...)
end))
